# This is a meta-makefile

problem_dict = {
    2: ("cpp", {}),
    7: ("cpp", {}),
    8: ("py", {"data_i": 7}),
    9: ("cpp", {}),
    10: ("cpp", {}),
}

def cpp_string(i, args):
    return f"""
p{i}: p{i}_cpp p{i}_py

.PHONY: p{i}_cpp
p{i}_cpp: problem{i}/.p{i}_cpp.stamp

problem{i}/.p{i}_cpp.stamp: ./problem{i}/p{i}
\t./problem{i}/p{i};
\ttouch $@
problem{i}/p{i}: problem{i}/p{i}.cpp
\tg++ -Wall -Wextra -o $@ $<

.PHONY: p{i}_py
p{i}_py: problem{i}/.p{i}_py.stamp

problem{i}/.p{i}_py.stamp: p{i}.png
\ttouch $@
p{i}.png: problem{i}/p{i}.py problem{i}/data.dat
\tpython3 problem{i}/p{i}.py

"""

def py_string(i, data_i):
    return f"""
p{i}: p{i}_py

.PHONY: p{i}_py
p{i}_py: problem{i}/.p{i}_py.stamp

problem{i}/.p{i}_py.stamp: p{i}.png
\ttouch $@
p{i}.png: problem{i}/p{i}.py problem{data_i}/data.dat
\tpython3 problem{i}/p{i}.py

"""

with open("Makefile", "w") as makefile:
    makefile.write("# This file is autogenerated, do not edit\n")
    makefile.write(f"""
.PHONY: all
all: {' '.join([f'p{i}' for i in problem_dict.keys()])}
""")

    for i, (ptype, args) in problem_dict.items():
        if ptype == "cpp":
            makefile.write(cpp_string(i, args.get("args", "")))
        elif ptype == "py":
            makefile.write(py_string(i, args.get("data_i", i)))
